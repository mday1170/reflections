Q:  How did viewing a diff between two versions of a file help you see the bug that was introduced.

The diff program points out the changes or differences between two source files.  Since the program
shows only the differences, the user doesn't have to cycle through the lines that are the same,
and depending on the size of the file, this could save the user from having to look through 
thousands of lines of text.


Q:  How could having easy access to the entire history of a file make you a more efficient programmer in the
long term?

Having access to all the files and their versions enable an easy way to revert back to a previous file in
the event that a change made to the current system went badly.  It's also a bonus for the overall development
process to see the incremental changes to files, so it's possible to learn what went well and what didn't.

Q: What are the Pros and Cons of manually choosing when to create a commit, like you do in Git, vs having version automatically
saved, like Google docs does.

Automatically saving files could save versions that do not actually work.  Manually choosing when to save/commit
ensures that the saved file wasn't saved by a timer, and that the file contains a "final" version that is ready
for the commit.

Of course, automatically saving files can save the author from losing work, but I still prefer manually saving the file.

Q: How can you use the command git log and git diff to view the history of files?

git log shows the commit id number, along with a message describing the changes made.  (Of course, the message
depends on what the user.)  Use git diff previous_id next_id to get a listing of the changes.  Make sure to 
check the date timestamps for the commits, though.

Q: How might using version control make your more confident to make changes that could break something?

The possibility of reverting changes back to the starting point before the changes gives the confidence, since
it's possible to just go back to that point in time and start over.

Q: Now that you have your workspace set up, what do you want to try using Git for?

I'll use Git to help with source control for coding projects.  I may also try Git out as a source control system for my blog text updates.